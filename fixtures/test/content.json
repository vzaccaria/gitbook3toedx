"<h1>Le basi della programmazione</h1>\n<p>In questo primo capitolo impareremo le basi della programmazione in\nOctave.</p>\n<p>Programmare significa scrivere; proprio come un libro &#xE8; fatto da\ncapitoli, paragrafi, frasi, parole e lettere, in maniera simile un\nprogramma pu&#xF2; essere spezzato in componenti sempre pi&#xF9; piccole.</p>\n<p>Per il momento la pi&#xF9; importante componente che guarderemo &#xE8; lo\n<strong>statement</strong>. Uno <strong>statement</strong> &#xE8; analogo ad una frase in un libro. Da\nsolo infatti uno statement non ha tanto significato; &#xE8; solo all&#x27;interno\ndi un contesto che assume un rilievo importante.</p>\n<p>Lo statement &#xE8; anche comunemente conosciuto come <strong>linea di codice</strong>;\nquesto &#xE8; perch&#xE9; gli statement tendono a essere scritti in sequenza su\nlinee individuali all&#x27;interno di un file testuale (chiamato <strong>codice\nsorgente</strong>, o programma).</p>\n<p>Una linea di codice &#xE8; quindi una linea del tuo programma.</p>\n<p>Ecco il primo esempio di programma Octave che andremo ad esaminare (solo\ndue righe di codice!):</p>\n<pre><code class=\"language-matlab\">1+1\n2+2\n</code></pre>\n<p>Questo programma deve essere letto dall&#x27;interprete Octave che esegue,\nlinea per linea, le istruzioni che gli abbiamo dato. Abbiamo due\nmodalit&#xE0; per far questo:</p>\n<ol>\n<li>\n<p>Invocare l&#x27;interprete (le modalit&#xE0; cambiano a seconda del sistema\nche state utilizzando, e.g. Windows, Linux, OSX) e digitare\ninterattivamente il programma:</p>\n<pre><code class=\"language-matlab\">octave:1&#x3E; 1+1 &#xAB;INVIO&#xBB;\nans =  2\noctave:2&#x3E; 2+2 &#xAB;INVIO&#xBB;\nans =  4\noctave:3&#x3E;\n</code></pre>\n</li>\n<li>\n<p>Scrivere le istruzioni in un file di testo (ad. es., <code>esempio.m</code>) ed\neseguirlo con l&#x27;interprete (anche qui le modalit&#xE0; cambiano a seconda\ndel sistema che state utilizzando). Otterrete in uscita la stampa a\nvideo seguente:</p>\n<pre><code class=\"language-matlab\">ans =  2\nans =  4\n</code></pre>\n</li>\n</ol>\n<p>In questo corso preferiamo usare la seconda modalit&#xE0; (anche per gli\nesercizi che dovrete risolvere), ma in alcuni casi faremo riferimento\nanche alla prima.</p>\n"
"<h1>Commenti</h1>\n<p>I commenti sono linee di codice che vengono ignorate dall&#x27;interprete. Di\nfatto sono costituite da testo che non viene interpretato ma serve solo\nal programmatore per ricordarsi ci&#xF2; che aveva scritto!</p>\n<ul>\n<li>x</li>\n<li>y</li>\n<li>z</li>\n</ul>\n<p>In Octave i commenti vengono marcati con il simbolo percentuale:</p>\n<pre><code class=\"language-matlab\">% Questo &#xE8; un commento\n1+1\n</code></pre>\n"
"<p>Esercizio: marcami come commento</p>\n<ul>\n<li>x</li>\n<li>y</li>\n<li>z</li>\n</ul>\n"
"<p>Questo e&#x27; altro testo</p>\n"
"<p>Questo e&#x27; altro esercizio</p>\n"
"<h1>Variabili</h1>\n<p>Il primo passo per poter comprendere realmente la programmazione &#xE8;\nconsiderare l&#x27;analogia con l&#x27;algebra che studiavi a scuola. L&#x27;algebra\ndescrive delle espressioni:</p>\n<pre><code>3 + 5 = 8\n</code></pre>\n<p>Se ti ricordi, le espressioni potevano contenere incognite, per esempio\n<code>x</code>:</p>\n<pre><code>3 + x = 8\n</code></pre>\n<p>Potevi determinare il valore della variabile <code>x</code> spostando i termini\nintorno all&#x27;equazione:</p>\n<pre><code>x = 8 - 3\n-&#x3E; x = 5\n</code></pre>\n<p><code>x</code> &#xE8; di fatto un contenitore che contiene il valore 5.</p>\n<h2>Cosa &#xE8; effettivamente una variabile</h2>\n<p>Proprio come nell&#x27;algebra, le variabili di cui si parla in informatica\nsono <strong>contenitori</strong> per valori.</p>\n<p>Questi contenitori sono posti nella memoria del calcolatore. In\ngenerale, potete modificare il contenuto di tali contenitori diverse\nvolte durante l&#x27;esecuzione del vostro programma; l&#x27;unica cosa importante\nda ricordare &#xE8; che quando il calcolatore viene spento, le variabili\nperdono il loro valore.</p>\n<p>Le variabili hanno un <strong>nome</strong> ed un <strong>valore</strong>; i nomi possono essere\nqualsiasi lettera o parola ma ricorda che ci sono delle restrizioni che\nvariano da linguaggio e linguaggio.</p>\n<h2>Come definire una variabile in Octave</h2>\n<p>Quest programma Octave mostra come assegnare un valore ai contenitori\n<code>x</code> ed <code>y</code>, calcolarne la somma ed inserirla nel contenitore <code>result</code>:</p>\n<pre><code class=\"language-matlab\">x = 5;\ny = 6;\nresult = x + y;\n</code></pre>\n<p>Nota bene: il valore corrente di una variabile &#xE8; sempre l&#x27;ultimo che le\n&#xE8; stato assegnato:</p>\n"
"<p>Supponete di avere il seguente programma:</p>\n<ul>\n<li><code>x = 1;</code></li>\n<li><code>x = 3;</code></li>\n<li><code>y = 6;</code></li>\n<li><code>result = x + y;</code></li>\n</ul>\n<p>Quale sar&#xE0; il valore finale di <code>result</code>?</p>\n"
"<h1>Tipi</h1>\n<p>I computer sono sofisticati e possono fare uso di variabili pi&#xF9;\ncomplesse di semplici numeri, ovvero possono essere di <strong>tipi</strong>\ndifferenti. I tipi pi&#xF9; comuni sono:</p>\n<ul>\n<li>\n<p><strong>Numeri</strong></p>\n<ul>\n<li><strong>Float (virgola mobile)</strong>: 1.21323, 4, -33.5, 100004 oppure\n0.123</li>\n<li><strong>Integer (interi)</strong>: 1, 12, -33, 140 ma non 1.233</li>\n</ul>\n</li>\n<li>\n<p><strong>Stringhe</strong>: come &#x22;elefante&#x22;, &#x22;acqua&#x22;, oppure &#x22;caspita sei alto!&#x22;</p>\n</li>\n<li>\n<p><strong>Booleani</strong>: possono essere <strong>1</strong> (vero) o <strong>0</strong> (falso) ma non di\npi&#xF9;. Vedremo che tutti gli operatori di confronto ritornano\n<em>booleani</em>.</p>\n</li>\n<li>\n<p><strong>Array</strong>: una sequenza di numeri 1,2,3,4,... o altri tipi</p>\n</li>\n<li>\n<p><strong>Strutture dati</strong>: rappresentano un oggetto complessi</p>\n</li>\n</ul>\n<p>In Octave non devi esplicitamente dichiarare il tipo di una variabile.\nDevi semplicemente specificare durante l&#x27;assegnamento qual &#xE8; il valore\nche variabile deve avere; l&#x27;interprete decider&#xE0; automaticamente che tipo\nassegnare quella variabile.</p>\n"
"<p>Fare in modo che ad <code>a</code> venga assegnato un intero</p>\n"
"<h1>Test di uguaglianza</h1>\n<p>I programmatori devono frequentemente determinare se due variabili sono\nuguali oppure no. Questo viene fatto attraverso un operatore di\nuguaglianza.</p>\n<p>L&#x27;operatore per determinare l&#x27;uguaglianza di variabili &#xE8; <code>==</code>\n(uguale-uguale). Il valore risultante pu&#xF2; essere <code>1</code> (<strong>vero</strong>) o <code>0</code>\n(<strong>falso</strong>) e, a sua volta, pu&#xF2; essere inserito in un&#x27;altra variabile:</p>\n<pre><code class=\"language-matlab\">a = 1\nb = 1\nc = (a == b)\n</code></pre>\n<p>In questo caso il valore finale della variabile C &#xE8; uguale a <code>1</code>.</p>\n<h2>Altri operatori relazionali</h2>\n<p>L&#x27;operatore <code>==</code> fa parte dell&#x27;insieme pi&#xF9; ampio di <strong>operatori\nrelazionali</strong>, ovvero operatori che permettono di stabilire che\nrelazione hanno due numeri:</p>\n<table>\n<thead>\n<tr>\n<th>Operatore</th>\n<th>Significato</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Minore di.</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Minore di o uguale a.</td>\n</tr>\n<tr>\n<td><code>&#x3E;</code></td>\n<td>Maggiore di.</td>\n</tr>\n<tr>\n<td><code>&#x3E;=</code></td>\n<td>Maggiori di o uguale a.</td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>Uguale a.</td>\n</tr>\n<tr>\n<td><code>~=</code></td>\n<td>Diverso da.</td>\n</tr>\n</tbody>\n</table>\n<p>Ad esempio, l&#x27;operatore <code>&#x3C;=</code> (minore uguale) &#xE8; tale che il seguente\ncodice:</p>\n<pre><code class=\"language-matlab\">a = 3\nb = 6\nc = (a &#x3C;= b)\n</code></pre>\n<p>assegni a <code>c</code> il valore 1.</p>\n"
"<p>Esercizio: Se avessimo usato l&#x27;espressione <code>c = (a ~= b)</code>, quale sarebbe\nstato il valore finale di <code>c</code>?</p>\n"
"<h1>Numbers</h1>\n<p>JavaScript has <strong>only one type of numbers</strong> 64-bit float point. It&#x27;s the same as Java&#x27;s <code>double</code>. Unlike most other programming languages, there is no separate integer type, so 1 and 1.0 are the same value.</p>\n<p>In this chapter, we&#x27;ll learn how to create numbers and perform operations on them (like additions and subtractions).</p>\n"
"<h1>Creation</h1>\n<p>Creating a number is easy, it can be done just like for any other\nvariable type using the <code>var</code> keyword.</p>\n<p>Numbers can be created from a constant value:</p>\n<pre><code>// This is a float:\nvar a = 1.2;\n\n// This is an integer:\nvar b = 10;\n</code></pre>\n<p>Or from the value of another variable:</p>\n<pre><code>var a = 2;\nvar b = a;\n</code></pre>\n"
"<p>Create a variable <code>x</code> which equals <code>10</code> and create a variable <code>y</code> which\nequals <code>a</code>.</p>\n"
